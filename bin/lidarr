#!/usr/bin/env node

'use strict';

const lidarr = require('..');

const bunyan = require('bunyan');
const bunyanDebugStream = require('bunyan-debug-stream');
const fse = require('fs-extra');
const path = require('path');

(async () => {
	const env = await lidarr.Environment.load({
		file: path.join(process.cwd(), 'config.json')
	});

	env.logger.info("Starting app");

	let dbNeedsMigration = await env.db.migrator.pending();

	if (dbNeedsMigration.length) {
		env.logger.info("Upgrading database");
		await env.db.migrator.up();
	}

	env.logger.info('Starting up')

	const server = new lidarr.Server(env);
	await server.start(8080);
	env.logger.info('Server started');

	let exiting = false;
	let task = null;
	let handle = null;

	if (env.config.paths.library) {
		let tasks = () => {
			(async () => {
				env.logger.info("Generating thumbnails");
				task = new lidarr.task.ThumbnailTask(env);
				await task.run();
				task = null;
				env.logger.info("Done generating thumbnails");

				if (exiting) {
					return;
				}

				env.logger.info("Syncing library");
				const organize = env.config.get('organize');
				task = new lidarr.task.SyncTask(env.config.paths.library, env, { organize });
				await task.run();
				task = null;
				env.logger.info("Done syncing library");

				if (!exiting) {
					handle = setTimeout(tasks, 10 * 60 * 1000);
				}
			})();
		};
		tasks();
	}

	process.on('SIGINT', () => {
		env.logger.info("Shutting down");

		(async () => {
			exiting = true;

			clearTimeout(handle);

			if (task) {
				env.logger.info("Waiting for task to complete");
				task.cancel();
				await task.promise();
				env.logger.info("Task complete");
			}

			await server.stop();
			env.logger.info("Server stopped");

			await env.db.close();
			env.logger.info("Database closed");
		})();
	});
})();
